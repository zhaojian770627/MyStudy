Program 		-> 	statementList <EOF> 			{<ID>,"println","print","{",<EOF>}
statementList	->	statement statementList 		{<ID>,"println"}
statementList	->			       					{<EOF>,"}"}

statement		->	assignmentStatement				{<ID>}
statement		->	printlnstatement				{"println"}
statement		->	printstatement					{"print"}
statement		->	readintStatement				{"readint"}
statement		->	compoundStatement				{"{"}
statement		->  whileStatement					{ "while" }

assignmentStatement	->	<ID> "=" assignmentTail	";"				{<ID>}
compoundStatement	->	"{"statementList"}"						{"{"}
printlnStatement    ->  "println"  	"(" printArg|lambda ")" ";"	{"println" }
printStatement      ->  "print"    	"(" printArg ")" ";"		{ "print"  }
readintStatement	->	"readint"	"("	<ID> ")" ";"			{ "readint"}
whileStatement		->	"while" "(" expr ")" statement			{ "while" }

assignmentTail		->	<ID> "=" assignmentTail					{<ID>}
assignmentTail		->	expr 									{"(","+","-",<UNSIGNED>,<ID>}

printArg            ->  expr									{"(","+","-",<UNSIGNED>,<ID>}
printArg            ->  <STRING>								{<STRING>}

expr		->	term termList						{"(","+","-",<UNSIGNED>,<ID>}

termList	->	"+" term termList 					{"+"}
termList	->  "-" term termList					{"-"}
termList	->										{")",";"}

term		->	factor factorList					{"(","+","-",<UNSIGNED>,<ID>)

factorList	->	"*" factor factorList 				{"*"}
factorList	->	"/" factor factorList 				{"/"}
factorList	->										{"}",";","+","-"}

factor	->	<UNSIGNED>								{<UNSIGNED>}
factor	->	<ID>									{<ID>}
factor	->	"(" expr ")"							{"("}
factor  ->  "+" factor								{"+"}
factor	->  "-" <ID>								{   }
factor	->	"-" <UNSIGNED>							{"-"}
factor	->  "-" "(" expr ")"
factor  ->	"-" "+" factor
factor  ->	"-" "-" factor
